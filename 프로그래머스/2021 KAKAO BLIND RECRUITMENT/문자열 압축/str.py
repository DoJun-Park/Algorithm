"""
[문제]
데이터 처리 전문가가 되고 싶은 "어피치"는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 
최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 
같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다.
간단한 예로 "aabbaccc"의 경우 "2a2ba3c"(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 
이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 

예를 들면, "abcabcdede"와 같은 문자열은 전혀 압축되지 않습니다. "어피치"는 이러한 단점을 해결하기 위해 
문자열을 1개 이상의 단위로 잘라서 압축하여 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다.

예를 들어, "ababcdcdababcdcd"의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 "2ab2cd2ab2cd"로 표현할 수 있습니다. 
다른 방법으로 8개 단위로 잘라서 압축한다면 "2ababcdcd"로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.

다른 예로, "abcabcdede"와 같은 경우, 문자를 2개 단위로 잘라서 압축하면 "abcabc2de"가 되지만, 
3개 단위로 자른다면 "2abcdede"가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.

압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요.

[문제 조건]
1. s의 길이는 1 이상 1,000 이하입니다.
2. s는 알파벳 소문자로만 이루어져 있습니다.

"""

"""
[문제 해결 방법]
문자열의 길이가 1 이면 압축된 길이도 무조거 1이기 때문에 1이 답이다.
문자열의 길이가 2 이상인 경우, 1부터 문자열의 길이만큼의 크기(size)로 문자열을 나눈다.
그리고 나눠진 문자열의 인덱스를 옮겨가며 비교해서 압축 여부를 체크한다.
반복되는 문자열이 있을 경우, compressed_cnt 변수에 카운트해주어 압축된 문자열의 길이를 구할 때 활용한다.
모든 size에 대해 압축된 문자열의 길이를 answer 리스트에 추가하여 가장 작은 값을 return한다.

[트러블 슈팅]
처음 문제를 풀 때, 반복되는 문자열의 수가 1자리수(2~9)라고 생각하여 압축된 문자열의 길이에 1만을 더해줬다.
하지만 반복되는 문자열의 수가 2자리수 또는 3자리수가 될 수도 있기 때문에 compressed_cnt를 문자열로 바꾼 후, 이 문자열의 
길이를 더해줌으로써 문제를 해결했다.

그리고 size 크기로 나눠진 문자열의 마지막 문자가 size 만큼의 크기가 안 될수도 있는 것을 고려하지 못했다.
이것을 고려하여 마지막 문자열에 대해서는 split[-1]의 길이를 구해 문제를 해결하였다.
"""


def solution(s):
    answer = []
    s_len = len(s)

    if s_len == 1: #문자열의 길이가 1인 경우
        answer.append(1)

    else:
        for size in range(1,s_len): #1부터 입력받은 문자열의 길이만큼 split하기 위해 1~len(s)만큼 반복
            split = [s[i:i+size] for i in range(0,s_len, size)] #size 만큼 문자열 split
            compressed_cnt =1 #반복되는 문자열의 수
            split_len = 0 #압축된 문자열의 길이

            for i in range(1,len(split)):
                if split[i-1] == split[i]: #문자열이 반복되는 경우
                    compressed_cnt += 1
                else:
                    if compressed_cnt != 1: #만약 compressed_cnt이 1이 아닌경우, 이전에 반복되는 문자열 존재
                        split_len += len(str(compressed_cnt)) + len(split[i-1])
                        compressed_cnt = 1
                    else: # 이전에 반복된 문자열이 존재하지 않는 경우
                        split_len += len(split[i-1])
            
            # 마지막 문자열에 대해서 처리
            if compressed_cnt != 1: 
                split_len += len(str(compressed_cnt)) + len(split[-1])
            else :
                split_len += len(split[-1])

            answer.append(split_len)

    return min(answer)
